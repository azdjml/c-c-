原码，反码，补码
原码：0代表正数，1代表负数，例如7的原码是00000111，
反码：反码就是原码的符号位不变，其他位按位取反，正数的反码与原码相同，如：10000111反码后11111000
补码：正数的补码与原码相同，负数的补码是符号位不变，其他位按位取反，再在后面加1.例如：
-7的原码：10000111，反码：11111000，补码后：11111001

数组：数组不能使用变量：abc来定义，只能使用常量：1234567890
字符串数组：如果数组是这样的 ：char arr【】=（‘1’）那1后面得数就是随机值，因为没有遇到/0
为什么会是随机值：因为‘1’只是一个字符，而“abc”是一个字符串，字符串自带\0
如果是这样的：arr【】=（“abc”）那系统会默认后面有\0，那么abc后面就不会再输出数
\0等于字符串休止符
c语言的变量都要写在mian函数的第一行
赋值：一个=是赋值，两个==是判断是否相等
变量：所有变量使用前都要初始化初始化默认是0例如
int a = 0，如果没有这段的话就使用不了这个变量，int是什么：值的类型，int代表的是整数，
如果你要赋值的数有小数的话就不能使用int，因为int只能放整数在里面
 
arr是数组 ,但不是所有数组都用arr，还有char等等
  下标是什么：下标是数组内字符的编号，下标默认从0开始往后递增
  怎么使用数组
例如：arr【？】 arr里面填入下标就能使用数组了
int arr【？】= {？}
char ch【？】={？}
float arr【】
add是函数

//赋值：右边赋给左边，例如 int a = 1，此时a的值就是1了，也可以int a = c + b
//赋值可以这样写：a = a+10 = a += 10 ，同
也可以 a -= 10

int add（int a ， int b）int可以是其他形式    ,   int是定义数组是什么类型的数
{
int z = a + b
return z
}
sizeof：是计算变量/类型所占的空间，单位是字节，
sizeof计算变量的时候可以把括号省略，但是在计算类型的时候括号不能省略
sizeof怎么计算数组个数：例如a = sizeof（arr）/sizeof（arr[0]），这里面arr是数组总大小除arr[0]
arr[0]是什么：是数组的单个数所以就得到了a = sizeof（arr）/sizeof（arr[0]），就可以计算这个数组有多少个数了//要看数组是什么类型的，如果是int的话，那arr[0]的单位就是四个字节，但是如果是scanf的话，就是两个字节
      库函数
printf


语句
while（i<10）
{
  printf("%d\n", arr[i])
i++     //i++是什么意思：i++等于循环上一句指令直到跳出循环，？++
}



操作符
%=取模and取余数  ， 例如：5/2等于2，余1，取模的作用就是把这个1取出来
~=按位取反，就是取一个数的反码，最后再补码
--前置，后置：前置--例如：int b = 10， int a= --b，先--在赋值，结果就是a = 9 ，b = 9
       后置--：int a = b--：先赋值，在--，结果就是：a = 10 ， b = 9
++同理--
（类型）：强制类型转换：比如我要把一个小数放进一个整数类型里面但这样程序就会出错所以就需要用到（类型）例如：int a = 3.14，这样就会出错，但是这样就不会：int a = （int）3.14

   代码
两个数求较大值
int main（）
{
   int a= 1
   int b = 2
if（a>b）
printf("a比较大：%d\n"，a)//printf函数在“”里面直接可以打印，那%d有什么用呢：用来打印后                                              //面的a，如果你后面不用打印变量的话就不用加这个%d
else
printf("b比较大：%d\n",b)
return 0
}

